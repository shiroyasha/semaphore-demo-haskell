# .semaphore/semaphore.yml
# Use the latest stable version of Semaphore 2.0 YML syntax:
version: v1.0

# Name of your pipeline. In this example we connect two pipelines with
# a promotion, so it helps to differentiate what's the job of each.
name: Semaphore example for Haskell and Scotty

# An agent defines the environment in which your code runs.
# It is a combination of one of available machine types and operating
# system images. See:
# - https://docs.semaphoreci.com/article/20-machine-types
# - https://docs.semaphoreci.com/article/32-ubuntu-1804-image
agent:
  machine:
    type: e1-standard-2
    os_image: ubuntu1804

# Blocks define the structure of a pipeline and are executed sequentially.
# Each block has a task that defines one or many parallel jobs. Jobs define
# the commands to execute.
# - https://docs.semaphoreci.com/article/62-concepts
blocks:
  - name: "Haskell with Scotty"
    task:
      env_vars:
        # Define an environment variable
        # Needed for use in scripts/test-sbt and scripts/test-gradle
        # - https://docs.semaphoreci.com/article/66-environment-variables-and-secrets
        - name: GHC_VERSION
          value: "8.4.2"
      # Commands in prologue run at the beginning of each parallel job.
      # - https://docs.semaphoreci.com/article/50-pipeline-yaml
      prologue:
        commands:
          - cd $HOME
          - ls -lah
          - apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 575159689BEFB442
          - echo 'deb http://download.fpcomplete.com/ubuntu xenial main'| tee /etc/apt/sources.list.d/fpco.list
          - apt-get update && apt-get install stack -y


          # Checkout code from Git repository. This step is mandatory if the
          # job is to work with your code.
          - checkout
      jobs:
        - name: Building job
          commands:
            - checkout
            - echo "Building executable"
            - stack build

      epilogue:
         commands:
            - if [ "$SEMAPHORE_JOB_RESULT" = "passed" ]; then echo "Haskell job has passed"; fi
            - if [ "$SEMAPHORE_JOB_RESULT" = "failed" ]; then echo "Haskell job has failed"; fi
            - echo "Build Finised!"
